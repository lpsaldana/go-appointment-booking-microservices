// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pb/agenda.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgendaService_CreateSlot_FullMethodName         = "/pb.AgendaService/CreateSlot"
	AgendaService_ListAvailableSlots_FullMethodName = "/pb.AgendaService/ListAvailableSlots"
	AgendaService_BookAppointment_FullMethodName    = "/pb.AgendaService/BookAppointment"
	AgendaService_ListAppointments_FullMethodName   = "/pb.AgendaService/ListAppointments"
)

// AgendaServiceClient is the client API for AgendaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgendaServiceClient interface {
	CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResponse, error)
	ListAvailableSlots(ctx context.Context, in *ListAvailableSlotsRequest, opts ...grpc.CallOption) (*ListAvailableSlotsResponse, error)
	BookAppointment(ctx context.Context, in *BookAppointmentRequest, opts ...grpc.CallOption) (*BookAppointmentResponse, error)
	ListAppointments(ctx context.Context, in *ListAppointmentsRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error)
}

type agendaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgendaServiceClient(cc grpc.ClientConnInterface) AgendaServiceClient {
	return &agendaServiceClient{cc}
}

func (c *agendaServiceClient) CreateSlot(ctx context.Context, in *CreateSlotRequest, opts ...grpc.CallOption) (*CreateSlotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSlotResponse)
	err := c.cc.Invoke(ctx, AgendaService_CreateSlot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaServiceClient) ListAvailableSlots(ctx context.Context, in *ListAvailableSlotsRequest, opts ...grpc.CallOption) (*ListAvailableSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailableSlotsResponse)
	err := c.cc.Invoke(ctx, AgendaService_ListAvailableSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaServiceClient) BookAppointment(ctx context.Context, in *BookAppointmentRequest, opts ...grpc.CallOption) (*BookAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookAppointmentResponse)
	err := c.cc.Invoke(ctx, AgendaService_BookAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agendaServiceClient) ListAppointments(ctx context.Context, in *ListAppointmentsRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppointmentsResponse)
	err := c.cc.Invoke(ctx, AgendaService_ListAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgendaServiceServer is the server API for AgendaService service.
// All implementations must embed UnimplementedAgendaServiceServer
// for forward compatibility.
type AgendaServiceServer interface {
	CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResponse, error)
	ListAvailableSlots(context.Context, *ListAvailableSlotsRequest) (*ListAvailableSlotsResponse, error)
	BookAppointment(context.Context, *BookAppointmentRequest) (*BookAppointmentResponse, error)
	ListAppointments(context.Context, *ListAppointmentsRequest) (*ListAppointmentsResponse, error)
	mustEmbedUnimplementedAgendaServiceServer()
}

// UnimplementedAgendaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgendaServiceServer struct{}

func (UnimplementedAgendaServiceServer) CreateSlot(context.Context, *CreateSlotRequest) (*CreateSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedAgendaServiceServer) ListAvailableSlots(context.Context, *ListAvailableSlotsRequest) (*ListAvailableSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableSlots not implemented")
}
func (UnimplementedAgendaServiceServer) BookAppointment(context.Context, *BookAppointmentRequest) (*BookAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookAppointment not implemented")
}
func (UnimplementedAgendaServiceServer) ListAppointments(context.Context, *ListAppointmentsRequest) (*ListAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppointments not implemented")
}
func (UnimplementedAgendaServiceServer) mustEmbedUnimplementedAgendaServiceServer() {}
func (UnimplementedAgendaServiceServer) testEmbeddedByValue()                       {}

// UnsafeAgendaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgendaServiceServer will
// result in compilation errors.
type UnsafeAgendaServiceServer interface {
	mustEmbedUnimplementedAgendaServiceServer()
}

func RegisterAgendaServiceServer(s grpc.ServiceRegistrar, srv AgendaServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgendaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgendaService_ServiceDesc, srv)
}

func _AgendaService_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgendaService_CreateSlot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).CreateSlot(ctx, req.(*CreateSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgendaService_ListAvailableSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).ListAvailableSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgendaService_ListAvailableSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).ListAvailableSlots(ctx, req.(*ListAvailableSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgendaService_BookAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).BookAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgendaService_BookAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).BookAppointment(ctx, req.(*BookAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgendaService_ListAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).ListAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgendaService_ListAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).ListAppointments(ctx, req.(*ListAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgendaService_ServiceDesc is the grpc.ServiceDesc for AgendaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgendaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AgendaService",
	HandlerType: (*AgendaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSlot",
			Handler:    _AgendaService_CreateSlot_Handler,
		},
		{
			MethodName: "ListAvailableSlots",
			Handler:    _AgendaService_ListAvailableSlots_Handler,
		},
		{
			MethodName: "BookAppointment",
			Handler:    _AgendaService_BookAppointment_Handler,
		},
		{
			MethodName: "ListAppointments",
			Handler:    _AgendaService_ListAppointments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/agenda.proto",
}
