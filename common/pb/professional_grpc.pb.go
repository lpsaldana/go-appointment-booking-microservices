// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pb/professional.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfessionalService_CreateProfessional_FullMethodName = "/pb.ProfessionalService/CreateProfessional"
	ProfessionalService_GetProfessional_FullMethodName    = "/pb.ProfessionalService/GetProfessional"
	ProfessionalService_ListProfessionals_FullMethodName  = "/pb.ProfessionalService/ListProfessionals"
)

// ProfessionalServiceClient is the client API for ProfessionalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfessionalServiceClient interface {
	CreateProfessional(ctx context.Context, in *CreateProfessionalRequest, opts ...grpc.CallOption) (*CreateProfessionalResponse, error)
	GetProfessional(ctx context.Context, in *GetProfessionalRequest, opts ...grpc.CallOption) (*GetProfessionalResponse, error)
	ListProfessionals(ctx context.Context, in *ListProfessionalsRequest, opts ...grpc.CallOption) (*ListProfessionalsResponse, error)
}

type professionalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfessionalServiceClient(cc grpc.ClientConnInterface) ProfessionalServiceClient {
	return &professionalServiceClient{cc}
}

func (c *professionalServiceClient) CreateProfessional(ctx context.Context, in *CreateProfessionalRequest, opts ...grpc.CallOption) (*CreateProfessionalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProfessionalResponse)
	err := c.cc.Invoke(ctx, ProfessionalService_CreateProfessional_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *professionalServiceClient) GetProfessional(ctx context.Context, in *GetProfessionalRequest, opts ...grpc.CallOption) (*GetProfessionalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfessionalResponse)
	err := c.cc.Invoke(ctx, ProfessionalService_GetProfessional_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *professionalServiceClient) ListProfessionals(ctx context.Context, in *ListProfessionalsRequest, opts ...grpc.CallOption) (*ListProfessionalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProfessionalsResponse)
	err := c.cc.Invoke(ctx, ProfessionalService_ListProfessionals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfessionalServiceServer is the server API for ProfessionalService service.
// All implementations must embed UnimplementedProfessionalServiceServer
// for forward compatibility.
type ProfessionalServiceServer interface {
	CreateProfessional(context.Context, *CreateProfessionalRequest) (*CreateProfessionalResponse, error)
	GetProfessional(context.Context, *GetProfessionalRequest) (*GetProfessionalResponse, error)
	ListProfessionals(context.Context, *ListProfessionalsRequest) (*ListProfessionalsResponse, error)
	mustEmbedUnimplementedProfessionalServiceServer()
}

// UnimplementedProfessionalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfessionalServiceServer struct{}

func (UnimplementedProfessionalServiceServer) CreateProfessional(context.Context, *CreateProfessionalRequest) (*CreateProfessionalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfessional not implemented")
}
func (UnimplementedProfessionalServiceServer) GetProfessional(context.Context, *GetProfessionalRequest) (*GetProfessionalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfessional not implemented")
}
func (UnimplementedProfessionalServiceServer) ListProfessionals(context.Context, *ListProfessionalsRequest) (*ListProfessionalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfessionals not implemented")
}
func (UnimplementedProfessionalServiceServer) mustEmbedUnimplementedProfessionalServiceServer() {}
func (UnimplementedProfessionalServiceServer) testEmbeddedByValue()                             {}

// UnsafeProfessionalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfessionalServiceServer will
// result in compilation errors.
type UnsafeProfessionalServiceServer interface {
	mustEmbedUnimplementedProfessionalServiceServer()
}

func RegisterProfessionalServiceServer(s grpc.ServiceRegistrar, srv ProfessionalServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfessionalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfessionalService_ServiceDesc, srv)
}

func _ProfessionalService_CreateProfessional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfessionalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessionalServiceServer).CreateProfessional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfessionalService_CreateProfessional_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessionalServiceServer).CreateProfessional(ctx, req.(*CreateProfessionalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfessionalService_GetProfessional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfessionalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessionalServiceServer).GetProfessional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfessionalService_GetProfessional_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessionalServiceServer).GetProfessional(ctx, req.(*GetProfessionalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfessionalService_ListProfessionals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfessionalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessionalServiceServer).ListProfessionals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfessionalService_ListProfessionals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessionalServiceServer).ListProfessionals(ctx, req.(*ListProfessionalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfessionalService_ServiceDesc is the grpc.ServiceDesc for ProfessionalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfessionalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ProfessionalService",
	HandlerType: (*ProfessionalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfessional",
			Handler:    _ProfessionalService_CreateProfessional_Handler,
		},
		{
			MethodName: "GetProfessional",
			Handler:    _ProfessionalService_GetProfessional_Handler,
		},
		{
			MethodName: "ListProfessionals",
			Handler:    _ProfessionalService_ListProfessionals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/professional.proto",
}
